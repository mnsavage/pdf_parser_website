AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An example SAM template for hosting a React website on S3 with CloudFront.

Resources:
  PdfParserApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: Prod
      Cors:
        AllowOrigin: !Sub "'https://${CloudFrontDistribution.DomainName}'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'OPTIONS,GET,PUT,POST,DELETE'"
      BinaryMediaTypes:
        - 'application~1pdf'
      DefinitionBody:
              swagger: '2.0'
              info:
                title: My API
              paths: # paths that the api has
                /api/upload:
                  get: # items GET protocol
                    x-amazon-apigateway-integration:
                      httpMethod: POST
                      type: aws_proxy
                      uri: # connect to lambda function resource
                        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PDFRequirementsFunction.Arn}/invocations
                      responses: {}
                  post: # items POST protocol
                    x-amazon-apigateway-integration:
                      httpMethod: POST
                      type: aws_proxy
                      uri: # connect to lambda function resource
                        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PDFUploadFunction.Arn}/invocations
                      responses: {}
                  options:
                    consumes:
                      - "application/json"
                    produces:
                      - "application/json"
                    responses:
                      '200':
                        description: "200 response"
                        headers:
                          Access-Control-Allow-Headers:
                            type: "string"
                          Access-Control-Allow-Methods:
                            type: "string"
                          Access-Control-Allow-Origin:
                            type: "string"
                    x-amazon-apigateway-integration:
                      type: mock
                      requestTemplates:
                        application/json: '{"statusCode": 200}'
                      responses:
                        default:
                          statusCode: "200"
                          responseTemplates:
                            application/json: '{}'
                          responseParameters:
                            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                            method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE'"
                            method.response.header.Access-Control-Allow-Origin: !Sub "'https://${CloudFrontDistribution.DomainName}'"
                      passthroughBehavior: "when_no_match"

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'YourLambdaRoleName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - 'lambda.amazonaws.com'
          Action:
            - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref CloudWatchLogsPolicy

  CloudWatchLogsPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'Managed Policy for CloudWatch Logs Access'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: 'arn:aws:logs:*:*:*'

  UtilitiesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: utilities
      Description: My shared layer for utilities
      ContentUri: ./pdf_parser_back_end/api/utilities
      CompatibleRuntimes:
        - python3.9

  PDFUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          CLOUDFRONT_URL: !Sub "https://${CloudFrontDistribution.DomainName}"
      CodeUri: ./pdf_parser_back_end/api/upload
      Handler: post.handler
      Layers:
        - !Ref UtilitiesLayer
      Runtime: python3.9
      Timeout: 300
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Upload:
          Type: Api
          Properties:
            Path: /api/upload
            Method: post
            RestApiId: !Ref PdfParserApi

  PDFRequirementsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          CLOUDFRONT_URL: !Sub "https://${CloudFrontDistribution.DomainName}"
      CodeUri: ./pdf_parser_back_end/api/upload
      Handler: get.handler
      Layers:
        - !Ref UtilitiesLayer
      Runtime: python3.9
      Timeout: 60
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Upload:
          Type: Api
          Properties:
            Path: /api/upload
            Method: get
            RestApiId: !Ref PdfParserApi

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false    # Set this to true to block public ACLs
        BlockPublicPolicy: false  # Set this to true to block public policies
        IgnorePublicAcls: false   # Set this to true to ignore public ACLs
        RestrictPublicBuckets: false  # Set this to true to restrict public buckets

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Id: PublicReadPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${WebsiteBucket}/*

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: OAI for accessing the website bucket

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt [WebsiteBucket, DomainName]
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginAccessIdentity}"
        DefaultRootObject: index.html
        Enabled: 'true'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none

Outputs:
  WebsiteURL:
    Description: "URL of the website"
    Value: !GetAtt [CloudFrontDistribution, DomainName]
  WebsiteBucketName:
    Description: "Generated Front-End S3 Bucket Name"
    Value: !Ref WebsiteBucket
  PdfParserApiUrl:
    Description: "PDF Parser API Gateway URL"
    Value: 
      !Sub "https://${PdfParserApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/"
