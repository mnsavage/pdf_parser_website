AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An example SAM template for hosting a React website on S3 with CloudFront.

Resources:
  PdfParserApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: Prod
      BinaryMediaTypes:
        - 'application~1pdf'
      DefinitionBody:
              swagger: '2.0'
              info:
                title: My API
              paths: # paths that the api has
                /upload:
                  post: # items POST protocol
                    x-amazon-apigateway-integration:
                      httpMethod: POST
                      type: aws_proxy
                      uri: # connect to lambda function resource
                        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PDFUploadFunction.Arn}/invocations
                      responses: {}

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'YourLambdaRoleName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - 'lambda.amazonaws.com'
          Action:
            - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref CloudWatchLogsPolicy

  CloudWatchLogsPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'Managed Policy for CloudWatch Logs Access'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: 'arn:aws:logs:*:*:*'

  PDFUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./pdf_parser_back_end/api
      Handler: upload.post.handler
      Runtime: python3.9
      Timeout: 300
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Upload:
          Type: Api
          Properties:
            Path: /upload
            Method: post

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false    # Set this to true to block public ACLs
        BlockPublicPolicy: false  # Set this to true to block public policies
        IgnorePublicAcls: false   # Set this to true to ignore public ACLs
        RestrictPublicBuckets: false  # Set this to true to restrict public buckets

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Id: PublicReadPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${WebsiteBucket}/*

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: OAI for accessing the website bucket

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt [WebsiteBucket, DomainName]
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginAccessIdentity}"
        DefaultRootObject: index.html
        Enabled: 'true'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none

Outputs:
  WebsiteURL:
    Description: "URL of the website"
    Value: !GetAtt [CloudFrontDistribution, DomainName]
  WebsiteBucketName:
    Description: "Generated Front-End S3 Bucket Name"
    Value: !Ref WebsiteBucket
